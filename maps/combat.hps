float[] x(10); float[] y(10); float[] z(10); int last;

void OnStart()
{
	for(int i=0;i<10;i++)
		AddEntityCollideCallback("big_hammer", "enemy_"+i, "UseHammerOnEnemy", false, 1);
	
	AddTimer("big_hammer", 0.00f, "TimerWeaponPosition");
}

void TimerWeaponPosition(string &in asWeapon)
{
	x[last] = GetEntityPosX(asWeapon);
	y[last] = GetEntityPosY(asWeapon);
	z[last] = GetEntityPosZ(asWeapon);

	last = (last + 1) % 10;
	
	AddTimer(asWeapon, 0.01f, "TimerWeaponPosition");
}

bool IsHitValid(string &in asWeapon)
{
	return MathSqrt(MathPow(GetEntityPosX(asWeapon) - x[last], 2) + MathPow(GetEntityPosY(asWeapon) - y[last], 2) + MathPow(GetEntityPosZ(asWeapon) - z[last], 2)) > 1.0;
}

void UseHammerOnEnemy(string &in asWeapon, string &in asEnemy, int alState)
{	
	if(IsHitValid(asWeapon))
	{
		PlaySoundAtEntity("SoundHitEffect", "MetalMediumBashFlesh.snt", asWeapon, 0, false);	
		CreateParticleSystemAtEntity("BloodyHit", "blood.ps", asWeapon, false);
		FadeEnemyToSmoke(asEnemy, false);
	}
	else
	{
		ChangePlayerStateToNormal();
		GiveSanityDamage(5.0f, true);
		StartScreenShake(0.025f, 0.75f, 0.25f, 0.50f);
	}
}
